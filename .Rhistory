###### Section 2.1: The Central Limit Theorem in practice ######
#Q1: Write a function called take_sample that takes the proportion of Democrats p and the sample size N as arguments and
#returns the sample average of Democrats (1) and Republicans (0). Calculate the sample average if the proportion of
#Democrats equals 0.45 and the sample size is 100.
set.seed(1)
take_sample <- function(p, N) {
mean(sample(c(1, 0), N, replace = TRUE, prob = c(p, 1-p)))
}
take_sample(0.45, 100)
#Q2: The take_sample function you defined previously generates our estimate, Xbar.Replicate the random sampling 10,000 times
#and calculate p − Xbar for each random sample. Save these differences as a vector called errors. Find the average of
#errors and plot a histogram of the distribution.
set.seed(1)
B <- 10000
errors <- replicate(B, {
errors <- p - take_sample(0.45, 100)
})
mean(errors)
hist(errors)
#Q3: Look at the histogram for errors. Which statement best describes the distribution of the errors?
#The errors are symmetrically distributed around 0.
#Q4: The error p − Xbar is a random variable. In practice, the error is not observed because we do not know the actual
#proportion of Democratic voters, p. However, we can describe the size of the error by constructing a simulation.
#What is the average size of the error if we define the size by taking the absolute value ∣p − Xbar∣ ?
mean(abs(errors))
#Q5: The standard error is related to the typical size of the error we make when predicting. We say size because, as we just
#saw, the errors are centered around 0. In that sense, the typical error is 0. For mathematical reasons related to the
#CLT, we actually use the standard deviation of errors rather than the average of the absolute values.
#As we have discussed, the standard error is the square root of the average squared distance (Xbar − p)2. The standard
#deviation is defined as the square root of the distance squared. Calculate the standard deviation of the spread.
sqrt(mean(errors^2))
#Q6: Estimate the standard error given an expected value of 0.45 and a sample size of 100.
sqrt(0.45*(1-0.45)/100)
set.seed(1)
take_sample <- function(p, N) {
mean(sample(c(1, 0), N, replace = TRUE, prob = c(p, 1-p)))
}
take_sample(0.45, 100)
set.seed(1)
B <- 10000
errors <- replicate(B, {
errors <- p - take_sample(0.45, 100)
})
mean(errors)
p <- 0.45
set.seed(1)
p <- 0.45
take_sample <- function(p, N) {
mean(sample(c(1, 0), N, replace = TRUE, prob = c(p, 1-p)))
}
take_sample(0.45, 100)
take_sample(p, 100)
set.seed(1)
B <- 10000
errors <- replicate(B, {
errors <- p - take_sample(0.45, 100)
})
mean(errors)
sqrt(take_sample(0.45, 100)*(1-take_sample(0.45, 100))/100)
set.seed(1)
sqrt(take_sample(0.45, 100)*(1-take_sample(0.45, 100))/100)
N <- seq(100, 5000, len = 100)
p <- 0.5
se <- sqrt(p*(1-p)/N)
plot(N, se)
set.seed(1)
B <- 10000
errors <- replicate(B, p - take_sample(0.45, 100))
mean(errors)
set.seed(1)
B <- 10000
errors <- replicate(B, {
errors <- p - take_sample(0.45, 100)
})
mean(errors)
?qnorm
qnorm(errors)
qnorm(p)
qnorm(errors, 0, 1)
qnorm(errors, take_sample(0.45, 100), sqrt(take_sample(0.45, 100)*(1-take_sample(0.45, 100))/100) )
qqnorm(errors)
qqnorm(errors) + qqline()
qqline(errors)
?qqline
qqline(errors)
mean(sample(c(1, 0), N, replace = TRUE, prob = c(p, 1-p)))
mean(sample(c(1, 0), 100, replace = TRUE, prob = c(p, 1-p)))
mean(sample(c(1, 0), 100, replace = TRUE, prob = c(p, 1-p)))
X_bar <- 0.51
se_hat <- sqrt(X_bar * (1-X_bar)/100)
se_hat
pnorm(0.01/se_hat) - pnorm(-0.01/se_hat)
X_bar <- 0.51
se_hat <- sqrt(X_bar * (1-X_bar)/100)
p_less_neg_01 <- pnorm(-0.01/se_hat)
p_greater_pos_01 <- 1- pnorm(0.01/se_hat)
p_less_neg_01 + p_greater_pos_01
?between
qnorm(.975)
qnorm(.995)
library(dslabs)
data("polls_us_election_2016")
head(polls_us_election_2016)
view(polls_us_election_2016)
?View
view(polls_us_election_2016)
class(polls_us_election_2016$enddate)
min(polls_us_election_2016$enddate)
max(polls_us_election_2016$enddate)
class(polls_us_election_2016$state)
levels(polls_us_election_2016$state)
polls <- polls_us_election_2016 %>%
filter(enddate => "2016-10-31" & state == "U.S")
library(tidyverse)
polls <- polls_us_election_2016 %>%
filter(enddate => "2016-10-31" & state == "U.S")
polls <- polls_us_election_2016 %>%
filter(state == "U.S")
polls
head(polls)
polls <- polls_us_election_2016 %>%
filter(enddate >= "2016-10-31" & state == "U.S")
polls
polls <- polls_us_election_2016 %>%
filter(enddate >= "2016-10-31" && state == "U.S")
polls
polls_us_election_2016
polls <- polls_us_election_2016 %>%
filter(enddate >= "2016-10-31" & state == "U.S")
polls
polls <- polls_us_election_2016 %>%
filter(state == "U.S")
polls
polls_us_election_2016
polls <- polls_us_election_2016 %>%
filter(state == "U.S")
polls
polls <- polls_us_election_2016 %>%
filter(state == "U.S.")
polls
polls <- polls_us_election_2016 %>%
filter(enddate => "2016-10-31" & state == "U.S.")
?values
range(polls_us_election_2016$enddate)
all(polls_us_election_2016$enddate)
polls_us_election_2016$enddate
polls <- polls_us_election_2016 %>%
filter(enddate => "2016-10-31" & state == "U.S.")
polls <- polls_us_election_2016 %>%
filter(enddate == "2016-10-31" & state == "U.S.")
polls
polls <- polls_us_election_2016 %>%
filter(enddate ==> "2016-10-31" & state == "U.S.")
polls <- polls_us_election_2016 %>%
filter(enddate => "2016-10-31" & state == "U.S.")
polls <- polls_us_election_2016 %>%
filter(enddate >= "2016-10-31" & state == "U.S.")
polls
polls$enddate
nrow(polls)
head(polls)
polls$samplesize[which.min(polls$startdate)]
X_hat <- polls$rawpoll_clinton[which.min(polls$startdate)]
X_hat
X_hat <- polls$rawpoll_clinton[which.min(polls$startdate)]/100
X_hat
se_hat <- sqrt(X_hat*(1-X_hat)/N)
se_hat
X_hat <- polls$rawpoll_clinton[which.min(polls$startdate)]/100
X_hat
N
N <- polls$samplesize[which.min(polls$startdate)]
N
se_hat <- sqrt(X_hat*(1-X_hat)/N)
se_hat
ci <- ((X_hat - qnorm(0.975))* se_hat, (X_hat + qnorm(0.975))*se_hat
ci <- ((X_hat - qnorm(0.975))* se_hat, (X_hat + qnorm(0.975))*se_hat)
ci <- c((X_hat - qnorm(0.975))* se_hat, (X_hat + qnorm(0.975))*se_hat)
ci
polls$samplesize[1]
N <- polls$samplesize[1]
N
X_hat <- polls$rawpoll_clinton[polls$startdate == N]/100
X_hat
N
N <- polls$samplesize[1]
X_hat <- polls$rawpoll_clinton[polls$startdate == N]/100
X_hat
X_hat <- polls$rawpoll_clinton[polls$samplesize == N]/100
X_hat
ci <- c(X_hat - qnorm(0.975)* se_hat, X_hat + qnorm(0.975)*se_hat)
ci
se_hat <- sqrt(X_hat*(1-X_hat)/N)
se_hat
ci <- c(X_hat - qnorm(0.975)* se_hat, X_hat + qnorm(0.975)*se_hat)
ci
ci <- c(X_hat - qnorm(0.975)* se_hat, X_hat + qnorm(0.975)*se_hat)
ci
names(polls)
pollster_results <- polls %>%
filter (pollster, enddate, rawpoll_clinton)
pollster_results <- polls %>%
filter (pollster)
pollster_results <- polls %>%
select (pollster, enddate, rawpoll_clinton)
pollster_results
pollster_results <- polls %>%
select (pollster, enddate, rawpoll_clinton) %>%
mutate(proportion_clinton = rawpoll_clinton/100)
pollster_results
pollster_results <- polls %>%
select (pollster, enddate, rawpoll_clinton) %>%
mutate(X_hat = rawpoll_clinton/100, se_hat = sqrt(X_hat*(1-X_hat)/N), lower = X_hat - qnorm(0.975)*se_hat,
upper = X_hat - qnorm(0.975)*se_hat)
pollster_results
pollster_results <- polls %>%
select (pollster, enddate, samplesize, rawpoll_clinton) %>%
mutate(X_hat = rawpoll_clinton/100, se_hat = sqrt(X_hat*(1-X_hat)/samplesize), lower = X_hat - qnorm(0.975)*se_hat,
upper = X_hat - qnorm(0.975)*se_hat)
pollster_results
pollster_results <- polls %>%
select (pollster, enddate, samplesize, rawpoll_clinton) %>%
mutate(X_hat = rawpoll_clinton/100, se_hat = sqrt(X_hat*(1-X_hat)/samplesize), lower = X_hat - qnorm(0.975)*se_hat,
upper = X_hat + qnorm(0.975)*se_hat) %>%
select(pollster, enddate, X_hat, se_hat, lower, upper)
pollster_results
p <- 0.482
pollster_results %>%
mutate(hit = between(p, lower, upper))
p <- 0.482
pollster_results %>%
mutate(hit = between(p, lower, upper))
pollster_results %>%
mutate(hit = between(0.482, lower, upper))
pollster_results %>%
mutate(p = 0.482)
pollster_results %>%
mutate(p = 0.482, hit = between(p, lower, upper))
?between
pollster_results %>%
mutate(p = 0.482, hit = between(p, lower, upper))
between(1:12, 7, 9)
pollster_results %>%
mutate(p = 0.482, hit = ifelse(lower< p & upper > p, 1, 0))
pollster_results %>%
mutate(p = 0.482, hit = ifelse(lower< p & upper > p, 1, 0)) %>%
summarize(mean(hit))
avg_hit <- pollster_results %>%
mutate(p = 0.482, hit = ifelse(lower< p & upper > p, 1, 0)) %>%
summarize(mean(hit))
avg_hit
d <- 2*(0.482)-1
d
head(polls)
polls %>%
mutate(d_hat = rawpoll_clinton - rawpoll_trump)
N <- polls$samplesize[1]
N
polls %>%
mutate(diff_hat = d_hat - dhat[1])
polls %>%
mutate(d_hat = rawpoll_clinton - rawpoll_trump)
N <- polls$samplesize[1]
polls %>%
mutate(diff_hat = d_hat - dhat[1])
polls <- polls %>%
mutate(d_hat = rawpoll_clinton - rawpoll_trump)
N <- polls$samplesize[1]
polls$d_hat - polls$d_hat[1]
