upper = X_hat - qnorm(0.975)*se_hat)
pollster_results
pollster_results <- polls %>%
select (pollster, enddate, samplesize, rawpoll_clinton) %>%
mutate(X_hat = rawpoll_clinton/100, se_hat = sqrt(X_hat*(1-X_hat)/samplesize), lower = X_hat - qnorm(0.975)*se_hat,
upper = X_hat + qnorm(0.975)*se_hat) %>%
select(pollster, enddate, X_hat, se_hat, lower, upper)
pollster_results
p <- 0.482
pollster_results %>%
mutate(hit = between(p, lower, upper))
p <- 0.482
pollster_results %>%
mutate(hit = between(p, lower, upper))
pollster_results %>%
mutate(hit = between(0.482, lower, upper))
pollster_results %>%
mutate(p = 0.482)
pollster_results %>%
mutate(p = 0.482, hit = between(p, lower, upper))
?between
pollster_results %>%
mutate(p = 0.482, hit = between(p, lower, upper))
between(1:12, 7, 9)
pollster_results %>%
mutate(p = 0.482, hit = ifelse(lower< p & upper > p, 1, 0))
pollster_results %>%
mutate(p = 0.482, hit = ifelse(lower< p & upper > p, 1, 0)) %>%
summarize(mean(hit))
avg_hit <- pollster_results %>%
mutate(p = 0.482, hit = ifelse(lower< p & upper > p, 1, 0)) %>%
summarize(mean(hit))
avg_hit
d <- 2*(0.482)-1
d
head(polls)
polls %>%
mutate(d_hat = rawpoll_clinton - rawpoll_trump)
N <- polls$samplesize[1]
N
polls %>%
mutate(diff_hat = d_hat - dhat[1])
polls %>%
mutate(d_hat = rawpoll_clinton - rawpoll_trump)
N <- polls$samplesize[1]
polls %>%
mutate(diff_hat = d_hat - dhat[1])
polls <- polls %>%
mutate(d_hat = rawpoll_clinton - rawpoll_trump)
N <- polls$samplesize[1]
polls$d_hat - polls$d_hat[1]
library(tidyverse)
library(dslabs)
take_poll(25)
library(tidyverse)
library(dslabs)
take_poll(25)
p <- seq(0,1, length = 100)
se <- sqrt(p*(1-p)/25)
plot(p, se)
polls <- polls_us_election_2016 %>%
filter(enddate >= "2016-10-31" & state == "U.S.")
nrow(polls)
N <- polls$samplesize[1]
N
polls$rawpoll_clinton[polls$samplesize == N]
head(polls_us_election_2016)
N
pollster_results <- polls %>%
select (pollster, enddate, samplesize, rawpoll_clinton) %>%
mutate(X_hat = rawpoll_clinton/100, se_hat = sqrt(X_hat*(1-X_hat)/samplesize), lower = X_hat - qnorm(0.975)*se_hat,
upper = X_hat + qnorm(0.975)*se_hat) %>%
select(pollster, enddate, X_hat, se_hat, lower, upper)
pollster_results
avg_hit <- pollster_results %>%
mutate(p = 0.482, hit = ifelse(lower< p & upper > p, 1, 0)) %>%
summarize(mean(hit))
avg_hit
pollster_results <- polls %>%
mutate(X_hat = (d_hat+1)/2,
se_hat = 2*sqrt(X_hat*(1-X_hat)/samplesize),
lower = d_hat - qnorm(0.975)*se_hat,
upper = d_hat + qnorm(0.975)*se_hat) %>%
select(pollster, enddate, d_hat, lower, upper)
polls <- polls %>%
mutate(d_hat = (rawpoll_clinton - rawpoll_trump)/100)
N <- polls$samplesize[1]
pollster_results <- polls %>%
mutate(X_hat = (d_hat+1)/2,
se_hat = 2*sqrt(X_hat*(1-X_hat)/samplesize),
lower = d_hat - qnorm(0.975)*se_hat,
upper = d_hat + qnorm(0.975)*se_hat) %>%
select(pollster, enddate, d_hat, lower, upper)
pollster_results <- polls %>%
mutate(d_hat = (rawpoll_clinton - rawpoll_trump)/100,
X_hat = (d_hat+1)/2,
se_hat = 2*sqrt(X_hat*(1-X_hat)/samplesize),
lower = d_hat - qnorm(0.975)*se_hat,
upper = d_hat + qnorm(0.975)*se_hat) %>%
select(pollster, enddate, d_hat, lower, upper)
pollster_results
avg_hit <- pollster_results %>%
mutate(d = 0.021, hit = ifelse(lower < d & upper > d, 1, 0)) %>%
summarize(mean(hit))
avg_hit
d <- 0.039
Ns <- c(1298, 533, 1342, 897, 774, 254, 812, 324, 1291, 1056, 2172, 516)
p <- (d+1)/2
# calculate confidence intervals of the spread
confidence_intervals <- sapply(Ns, function(N){
X <- sample(c(0,1), size=N, replace=TRUE, prob = c(1-p, p))
X_hat <- mean(X)
SE_hat <- sqrt(X_hat*(1-X_hat)/N)
2*c(X_hat, X_hat - 2*SE_hat, X_hat + 2*SE_hat) - 1
})
# generate a data frame storing results
polls <- data.frame(poll = 1:ncol(confidence_intervals),
t(confidence_intervals), sample_size = Ns)
names(polls) <- c("poll", "estimate", "low", "high", "sample_size")
polls
Code: Calculating the spread of combined polls
Note that to compute the exact 95% confidence interval, we would use qnorm(.975) instead of 1.96.
d_hat <- polls %>%
summarize(avg = sum(estimate*sample_size) / sum(sample_size)) %>%
.$avg
p_hat <- (1+d_hat)/2
moe <- 2*1.96*sqrt(p_hat*(1-p_hat)/sum(polls$sample_size))
round(d_hat*100,1)
round(moe*100, 1)
d <- 0.039
Ns <- c(1298, 533, 1342, 897, 774, 254, 812, 324, 1291, 1056, 2172, 516)
p <- (d+1)/2
X <- sample(c(0,1), size=N, replace=TRUE, prob = c(1-p, p))
X_hat <- mean(X)
SE_hat <- sqrt(X_hat*(1-X_hat)/N)
2*c(X_hat, X_hat - 2*SE_hat, X_hat + 2*SE_hat) - 1
})
confidence_intervals <- sapply(Ns, function(N){
X <- sample(c(0,1), size=N, replace=TRUE, prob = c(1-p, p))
X_hat <- mean(X)
SE_hat <- sqrt(X_hat*(1-X_hat)/N)
2*c(X_hat, X_hat - 2*SE_hat, X_hat + 2*SE_hat) - 1
})
polls <- data.frame(poll = 1:ncol(confidence_intervals),
t(confidence_intervals), sample_size = Ns)
names(polls) <- c("poll", "estimate", "low", "high", "sample_size")
polls
d_hat <- polls %>%
summarize(avg = sum(estimate*sample_size) / sum(sample_size)) %>%
.$avg
d_hat
round(d_hat*100,1)
p_hat <- (1+d_hat)/2
moe <- 2*1.96*sqrt(p_hat*(1-p_hat)/sum(polls$sample_size))
round(d_hat*100,1)
round(moe*100,1)
d <- 0.039
Ns <- c(1298, 533, 1342, 897, 774, 254, 812, 324, 1291, 1056, 2172, 516)
p <- (d+1)/2
confidence_intervals <- sapply(Ns, function(N){
X <- sample(c(0,1), size=N, replace=TRUE, prob = c(1-p, p))
X_hat <- mean(X)
SE_hat <- sqrt(X_hat*(1-X_hat)/N)
2*c(X_hat, X_hat - 2*SE_hat, X_hat + 2*SE_hat) - 1
})
confidence_intervals
polls <- data.frame(poll = 1:ncol(confidence_intervals),
t(confidence_intervals), sample_size = Ns)
names(polls) <- c("poll", "estimate", "low", "high", "sample_size")
polls
d_hat <- polls %>%
summarize(avg = sum(estimate*sample_size) / sum(sample_size)) %>%
.$avg
d_hat
library(dslabs)
data(heights)
head (heights)
x <- heights %>% filter(sex == "Male") %>%
.$height
x
avg <- mean(x)
sd <- sd(x)
avg
sd
?sample
X <- sample(x,50)
library(dplyr)
set.seed(1)
X <- sample(x,50)
set.seed(1)
X <- sample(x,50, replace = TRUE)
set.seed(1)
X <- sample(x,50, replace = TRUE)
mean(X)
sd(X)
set.seed(1)
X <- sample(x,50, replace = TRUE)
mean(X)
sd(X)
set.seed(1)
X <- sample(x,50, replace = TRUE)
mean(X)
sd(X)
miu <- mean(x)
sigma <- sd(x)
miu
sigma
set.seed(1)
X <- sample(x,50, replace = TRUE)
mean(X)
sd(X)
x <- heights %>% filter(sex == "Male") %>%
.$height
#Q1: What are the population average and standard deviation?
miu <- mean(x)
sigma <- sd(x)
set.seed(1)
X <- sample(x, 50, replace = TRUE)
mean(X)
sd(X)
X <- sample(x, 50, replace = TRUE)
mean(X)
sd(X)
X <- sample(x, 50, replace = TRUE)
mean(X)
sd(X)
X <- sample(x, 50, replace = TRUE)
mean(X)
sd(X)
set.seed(1)
X <- sample(x, 50, replace = TRUE)
mean(X)
sd(X)
set.seed(1)
N <- 50
X <- sample(x, N, replace = TRUE)
mean(X)
sd(X)
set.seed(1)
N <- 50
X <- sample(x, N, replace = TRUE)
se <- sd(X)/sqrt(N)
ci <- c(mean(X)- 1.96*se, mean(X)+ 1.96*se)
ci
set.seed(1)
N <- 50
X <- sample(x, N, replace = TRUE)
se <- sd(X)/sqrt(N)
ci <- c(mean(X)- qnorm(0.975)*se, mean(X)+ qnorm(0.975)*se)
ci
x <- heights %>% filter(sex == "Male") %>%
.$height
mean(x)
sd(x)
set.seed(1)
N <- 50
X <- sample(x, N, replace = TRUE)
mean(X)
sd(X)
set.seed(1)
N <- 50
X <- sample(x, N, replace = TRUE)
se <- sd(X)/sqrt(N)
ci <- c(mean(X)- qnorm(0.975)*se, mean(X)+ qnorm(0.975)*se)
ci
?between
between(1:12, 7, 9)
y <- 1:10
y
between(3, y)
set.seed(1)
N <- 50
B <- 10000
res <- replicate(B, {
X <- sample(x, N, replace = TRUE)
se <- sd(X)/sqrt(N)
interval <- between(mean(x), (mean(X)- qnorm(0.975)*se, mean(X)+ qnorm(0.975)*se)
})
X <- sample(x, N, replace = TRUE)
interval <- between(mean(x), (mean(X)- qnorm(0.975)*se, mean(X)+ qnorm(0.975)*se)
interval <- between(mean(x), mean(x)-qnorm(0.975)*se, mean(x)+qnorm(0.975)*se)
interval
set.seed(1)
N <- 50
B <- 10000
res <- replicate(B, {
X <- sample(x, N, replace = TRUE)
se <- sd(X)/sqrt(N)
interval <- between(mean(x), mean(x)-qnorm(0.975)*se, mean(x)+qnorm(0.975)*se)
})
mean(res)
res
X <- sample(x, N, replace = TRUE)
se <- sd(X)/sqrt(N)
interval <- between(mean(x), mean(x)-qnorm(0.975)*se, mean(x)+qnorm(0.975)*se)
interval
X <- sample(x, N, replace = TRUE)
se <- sd(X)/sqrt(N)
interval <- between(mean(x), mean(x)-qnorm(0.975)*se, mean(x)+qnorm(0.975)*se)
interval
X <- sample(x, N, replace = TRUE)
se <- sd(X)/sqrt(N)
interval <- between(mean(x), mean(x)-qnorm(0.975)*se, mean(x)+qnorm(0.975)*se)
interval
X <- sample(x, N, replace = TRUE)
se <- sd(X)/sqrt(N)
interval <- between(mean(x), mean(x)-qnorm(0.975)*se, mean(x)+qnorm(0.975)*se)
interval
X <- sample(x, N, replace = TRUE)
se <- sd(X)/sqrt(N)
interval <- between(mean(x), mean(x)-qnorm(0.975)*se, mean(x)+qnorm(0.975)*se)
interval
X <- sample(x, N, replace = TRUE)
se <- sd(X)/sqrt(N)
interval <- between(mean(x), mean(x)-qnorm(0.975)*se, mean(x)+qnorm(0.975)*se)
interval
X <- sample(x, N, replace = TRUE)
se <- sd(X)/sqrt(N)
interval <- between(mean(x), mean(x)-qnorm(0.975)*se, mean(x)+qnorm(0.975)*se)
interval
X <- sample(x, N, replace = TRUE)
se <- sd(X)/sqrt(N)
interval <- between(mean(x), mean(x)-qnorm(0.975)*se, mean(x)+qnorm(0.975)*se)
interval
set.seed(1)
N <- 50
B <- 10000
res <- replicate(B, {
X <- sample(x, N, replace = TRUE)
se <- sd(X)/sqrt(N)
interval <- between(mean(x), mean(X)-qnorm(0.975)*se, mean(X)+qnorm(0.975)*se)
})
mean(res)
library(ggplot2)
data("polls_us_election_2016")
polls <- polls_us_election_2016 %>%
filter(pollster %in% c("Rasmussen Reports/Pulse Opinion Research","The Times-Picayune/Lucid") &
enddate >= "2016-10-15" &
state == "U.S.") %>%
mutate(spread = rawpoll_clinton/100 - rawpoll_trump/100)
head (polls)
polls <- ggplot(aes(pollster, spread)) +
geom_boxplot() + geom_point()
polls %>% ggplot(aes(pollster, spread)) +
geom_boxplot() + geom_point()
res <- polls %>%
group_by(pollster)
summarize(avg = mean(spread), s = sd(spread))
res <- polls %>%
group_by(pollster) %>%
summarize(avg = mean(spread), s = sd(spread), n = n())
estimate <- max(res$avg) - min(res$avg)
se_hat <- sqrt(max(res$s)^2/max(res$n) + min(res$s)^2/min(res$n))
ci <- c(estimate - qnorm(0.975)*se_hat, estimate + qnorm(0.975)*se_hat)
ci
library(dslabs)
library(dplyr)
data(heights)
head(heights)
x <- heights %>% filter(sex == "Male") %>%
.$height
#Q1: What are the population average and standard deviation?
mean(x)
sd(x)
#Q2: Take a sample of size 50, with replacement, and construct an estimate for miu and sigma
set.seed(1)
N <- 50
X <- sample(x, N, replace = TRUE)
mean(X)
sd(X)
#Q3: What does the central limit theory tell us about the sample average and how it is related to miu,
#the population average?
#Answer: it is a random variable with expected value miu and standard error sigma/sqrt N
#Q4: Construct a 95% confidence interval for miu
set.seed(1)
N <- 50
X <- sample(x, N, replace = TRUE)
se <- sd(X)/sqrt(N)
ci <- c(mean(X)- qnorm(0.975)*se, mean(X) + qnorm(0.975)*se)
#Q5: Run a Monte Carlo simulation in which you compute 10,000 confidence intervals as you have just done. What proportion of
#these intervals include miu
set.seed(1)
N <- 50
B <- 10000
res <- replicate(B, {
X <- sample(x, N, replace = TRUE)
se <- sd(X)/sqrt(N)
interval <- between(mean(x), mean(X)-qnorm(0.975)*se, mean(X)+qnorm(0.975)*se)
})
head(res)
library(ggplot2)
data("polls_us_election_2016")
polls <- polls_us_election_2016 %>%
filter(pollster %in% c("Rasmussen Reports/Pulse Opinion Research","The Times-Picayune/Lucid") &
enddate >= "2016-10-15" &
state == "U.S.") %>%
mutate(spread = rawpoll_clinton/100 - rawpoll_trump/100)
polls %>% ggplot(aes(pollster, spread)) +
geom_boxplot() + geom_point()
head(polls)
sigma <- polls %>%
group_by(pollster) %>%
summarize(s = sd(spread))
sigma
head(res)
res <- polls %>%
group_by(pollster) %>%
summarize(avg = mean(spread), s = sd(spread), n = n())
head(res)
estimate <- max(res$avg) - min(res$avg)
se_hat <- sqrt(max(res$s)^2/max(res$n) + min(res$s)^2/min(res$n))
ci <- c(estimate - qnorm(0.975)*se_hat, estimate + qnorm(0.975)*se_hat)
ci
estimate
polls <- polls_us_election_2016 %>%
filter(enddate >= "2016-10-15" &
state == "U.S.")
res <- polls %>% group_by(pollster) %>%
summarize(avg = mean(spread), s = sd(spread), N = n())
estimate <- res$avg[2] - res$avg[1]
se_hat <- sqrt(res$s[2]^2/res$N[2] + res$s[1]^2/res$N[1])
p <- 1 - pnorm(estimate, 0, se_hat)   #consider this a t-test where, under the null, pollster 1 and pollster 2
2*p                                   #are not sig. different. Therefore, miu would be 0, the estimate or observed
#difference is M, or in this case, the x argument in the pnorm function.
polls <- polls_us_election_2016 %>%
filter(enddate >= "2016-10-15" &
state == "U.S.")
head(polls)
polls <- polls_us_election_2016 %>%
filter(enddate >= "2016-10-15" &
state == "U.S.") %>%
group_by(pollster) %>%
filter(n() >= 5)
head(polls)
polls <- polls_us_election_2016 %>%
filter(enddate >= "2016-10-15" &
state == "U.S.") %>%
group_by(pollster) %>%
filter(n() >= 5) %>%    #filters by pollsters who took 5 or more polls
mutate(spread = rawpoll_clinton/100 - rawpoll_trump/100)
polls <- polls_us_election_2016 %>%
filter(enddate >= "2016-10-15" &
state == "U.S.") %>%
group_by(pollster) %>%
filter(n() >= 5)
polls <- polls_us_election_2016 %>%
filter(enddate >= "2016-10-15" &
state == "U.S.") %>%
group_by(pollster) %>%
filter(n() >= 5) %>%    #filters by pollsters who took 5 or more polls
mutate(spread = rawpoll_clinton/100 - rawpoll_trump/100)
head(polls)
View(polls)
polls <- polls_us_election_2016 %>%
filter(enddate >= "2016-10-15" &
state == "U.S.") %>%
group_by(pollster) %>%
filter(n() >= 5) %>%    #filters by pollsters who took 5 or more polls
mutate(spread = rawpoll_clinton/100 - rawpoll_trump/100) %>%
ungroup()
View(polls)
polls <- polls_us_election_2016 %>%
filter(enddate >= "2016-10-15" &
state == "U.S.") %>%
group_by(pollster) %>%
filter(n() >= 5) %>%    #filters by pollsters who took 5 or more polls
mutate(spread = rawpoll_clinton/100 - rawpoll_trump/100)
polls <- polls_us_election_2016 %>%
filter(enddate >= "2016-10-15" &
state == "U.S.") %>%
group_by(pollster) %>%
filter(n() >= 5) %>%    #filters by pollsters who took 5 or more polls
mutate(spread = rawpoll_clinton/100 - rawpoll_trump/100) %>%
ungroup()
var <- polls %>%
group_by(pollster) %>%
summarize(avg = mean(spread), s = sd(spread))
head(var)
prev <- 0.00025    # disease prevalence
N <- 100000    # number of tests
outcome <- sample(c("Disease", "Healthy"), N, replace = TRUE, prob = c(prev, 1-prev))
prev
N_D <- sum(outcome == "Disease")    # number with disease
N_H <- sum(outcome == "Healthy")
N_D
accuracy <- 0.99
test <- vector("character", N)
test
test[outcome == "Disease"]
?vector
outcome[outcome == "Disease"]
sample(c("+","-"), N_D, replace = TRUE, prob = c(accuracy, 1-accuracy))
sample(c("+","-"), N_D, replace = TRUE, prob = c(accuracy, 1-accuracy))
sample(c("+","-"), N_D, replace = TRUE, prob = c(accuracy, 1-accuracy))
sample(c("+","-"), N_D, replace = TRUE, prob = c(accuracy, 1-accuracy))
sample(c("+","-"), N_D, replace = TRUE, prob = c(accuracy, 1-accuracy))
sample(c("+","-"), N_D, replace = TRUE, prob = c(accuracy, 1-accuracy))
test[outcome == "Disease"] <- sample(c("+","-"), N_D, replace = TRUE, prob = c(accuracy, 1-accuracy))
test[outcome == "Disease"]
test[outcome == "Healthy"] <- sample(c("-", "+"), N_H, replace=TRUE, prob = c(accuracy, 1-accuracy))
outcome
table(outcome, test)
prev <- 0.00025    # disease prevalence
N <- 100000    # number of tests
outcome <- sample(c("Disease", "Healthy"), N, replace = TRUE, prob = c(prev, 1-prev))
N_D <- sum(outcome == "Disease")    # number with disease
N_H <- sum(outcome == "Healthy")
accuracy <- 0.99
test <- vector("character", N)
test[outcome == "Disease"] <- sample(c("+","-"), N_D, replace = TRUE, prob = c(accuracy, 1-accuracy))
test[outcome == "Healthy"] <- sample(c("-", "+"), N_H, replace=TRUE, prob = c(accuracy, 1-accuracy))
table(outcome, test)
